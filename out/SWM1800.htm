<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\out\SWM1800.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\out\SWM1800.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Dec 06 10:06:12 2016
<BR><P>
<H3>Maximum Stack Usage =        104 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
IRQ0_Handler &rArr; CalculateParkAngle &rArr; SMC_Position_Estimation &rArr; atan2CORDIC &rArr; CORDIC_Arctan
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[11]">IRQ3_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">IRQ3_Handler</a><BR>
 <LI><a href="#[14]">IRQ6_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">IRQ6_Handler</a><BR>
 <LI><a href="#[15]">IRQ7_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">IRQ7_Handler</a><BR>
 <LI><a href="#[16]">IRQ8_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">IRQ8_Handler</a><BR>
 <LI><a href="#[17]">IRQ9_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">IRQ9_Handler</a><BR>
 <LI><a href="#[18]">IRQ10_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">IRQ10_Handler</a><BR>
 <LI><a href="#[19]">IRQ11_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">IRQ11_Handler</a><BR>
 <LI><a href="#[1a]">IRQ12_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">IRQ12_Handler</a><BR>
 <LI><a href="#[1b]">IRQ13_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">IRQ13_Handler</a><BR>
 <LI><a href="#[1c]">IRQ14_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">IRQ14_Handler</a><BR>
 <LI><a href="#[1d]">IRQ15_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">IRQ15_Handler</a><BR>
 <LI><a href="#[1e]">IRQ16_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">IRQ16_Handler</a><BR>
 <LI><a href="#[1f]">IRQ17_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">IRQ17_Handler</a><BR>
 <LI><a href="#[20]">IRQ18_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">IRQ18_Handler</a><BR>
 <LI><a href="#[21]">IRQ19_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">IRQ19_Handler</a><BR>
 <LI><a href="#[22]">IRQ20_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">IRQ20_Handler</a><BR>
 <LI><a href="#[23]">IRQ21_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">IRQ21_Handler</a><BR>
 <LI><a href="#[24]">IRQ22_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">IRQ22_Handler</a><BR>
 <LI><a href="#[25]">IRQ23_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">IRQ23_Handler</a><BR>
 <LI><a href="#[26]">IRQ24_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">IRQ24_Handler</a><BR>
 <LI><a href="#[27]">IRQ25_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">IRQ25_Handler</a><BR>
 <LI><a href="#[28]">IRQ26_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">IRQ26_Handler</a><BR>
 <LI><a href="#[29]">IRQ27_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">IRQ27_Handler</a><BR>
 <LI><a href="#[2a]">IRQ28_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">IRQ28_Handler</a><BR>
 <LI><a href="#[2b]">IRQ29_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">IRQ29_Handler</a><BR>
 <LI><a href="#[2c]">IRQ30_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">IRQ30_Handler</a><BR>
 <LI><a href="#[2d]">IRQ31_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">IRQ31_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">HardFault_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[5]">IPM_FO_detect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[e]">IRQ0_Handler</a> from pmsm.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[18]">IRQ10_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[19]">IRQ11_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[1a]">IRQ12_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[1b]">IRQ13_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[1c]">IRQ14_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[1d]">IRQ15_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[1e]">IRQ16_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[1f]">IRQ17_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[20]">IRQ18_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[21]">IRQ19_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[f]">IRQ1_Handler</a> from pmsm.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[22]">IRQ20_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[23]">IRQ21_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[24]">IRQ22_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[25]">IRQ23_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[26]">IRQ24_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[27]">IRQ25_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[28]">IRQ26_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[29]">IRQ27_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[2a]">IRQ28_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[2b]">IRQ29_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[10]">IRQ2_Handler</a> from pmsm.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[2c]">IRQ30_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[2d]">IRQ31_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[11]">IRQ3_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[12]">IRQ4_Handler</a> from pmsm.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[13]">IRQ5_Handler</a> from pmsm.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[14]">IRQ6_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[15]">IRQ7_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[16]">IRQ8_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[17]">IRQ9_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[7]">Over_temperature_detect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[6]">Phase_Current_Offset_Advalue_detect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[4]">Phase_current_deviation</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[8]">Reset_Handler</a> from startup_swm1800.o(RESET) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_swm1800.o(.text) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[2e]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_swm1800.o(RESET)
 <LI><a href="#[0]">dcbus_voltage_protect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[3]">lose_phase_detect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[2f]">main</a> from pmsm.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[2]">motor_lose_step_detect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
 <LI><a href="#[1]">phase_current_protect</a> from faultprotect.o(.text) referenced 2 times from faultprotect.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, startup_swm1800.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>__Vectors_End</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_swm1800.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[2e]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[31]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[58]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[a2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[a3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[a4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[a5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[33]"></a>SetupPorts</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, initmcu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetupPorts &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>FieldWeakening</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, fdweak.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FieldWeakening &rArr; DIV_Fun
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoControl (via Veneer)
</UL>

<P><STRONG><a name="[79]"></a>FWInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fdweak.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[85]"></a>InvPark</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, invpark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InvPark
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>dutypid</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, svgen.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>Svpwm_Qua</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, svgen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Duty
</UL>

<P><STRONG><a name="[3a]"></a>math_cal_0</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, svgen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Duty
</UL>

<P><STRONG><a name="[38]"></a>Svpwm_Duty</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, svgen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math_cal_0
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Qua
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Fun
</UL>

<P><STRONG><a name="[3b]"></a>Svpwm_Cal</STRONG> (Thumb, 272 bytes, Stack size 12 bytes, svgen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
</UL>

<P><STRONG><a name="[3d]"></a>CalcTimes</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, svgen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CalcTimes &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSVGen
</UL>

<P><STRONG><a name="[3f]"></a>CalcSVGen</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, svgen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CalcSVGen &rArr; CalcTimes &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimes
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler (via Veneer)
</UL>

<P><STRONG><a name="[84]"></a>SinCos</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, trig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SinCos
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler (via Veneer)
</UL>

<P><STRONG><a name="[80]"></a>sqrt_16</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, trig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sqrt_16
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoControl (via Veneer)
</UL>

<P><STRONG><a name="[37]"></a>DIV_Fun</STRONG> (Thumb, 150 bytes, Stack size 36 bytes, trig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DIV_Fun
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Duty
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldWeakening
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMC_Position_Estimation (via Veneer)
</UL>

<P><STRONG><a name="[34]"></a>GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, swm1800_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq_Init (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupPorts
</UL>

<P><STRONG><a name="[a7]"></a>GPIO_SetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>GPIO_ClrBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>GPIO_InvBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler (via Veneer)
</UL>

<P><STRONG><a name="[a9]"></a>GPIO_GetBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>GPIO_SetBits</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>GPIO_ClrBits</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>GPIO_InvBits</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>GPIO_GetBits</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, swm1800_gpio.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>PWM_Stop</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, swm1800_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[40]"></a>PWM_Init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, swm1800_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_Init &rArr; PWM_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm (via Veneer)
</UL>

<P><STRONG><a name="[ae]"></a>PWM_Start</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>PWM_SetCycle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>PWM_GetCycle</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>PWM_SetHDuty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>PWM_GetHDuty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>PWM_SetDeadzone</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>PWM_GetDeadzone</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>PWM_IntNCycleEn</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>PWM_IntNCycleDis</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>PWM_IntNCycleClr</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>PWM_IntNCycleStat</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>PWM_IntHEndEn</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>PWM_IntHEndDis</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>PWM_IntHEndClr</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>PWM_IntHEndStat</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, swm1800_pwm.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>TIMR_INTClr</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, swm1800_timr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler (via Veneer)
</UL>

<P><STRONG><a name="[43]"></a>TIMR_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_timr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler (via Veneer)
</UL>

<P><STRONG><a name="[42]"></a>TIMR_Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, swm1800_timr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMR_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Stop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_INTClr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq_Init (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>TIMR_Start</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_timr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ4_Handler (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm (via Veneer)
</UL>

<P><STRONG><a name="[bd]"></a>TIMR_Halt</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>TIMR_Resume</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>TIMR_SetPeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>TIMR_GetPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>TIMR_GetCurValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>TIMR_INTEn</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>TIMR_INTDis</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>TIMR_INTStat</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, swm1800_timr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, system_swm1800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 198 bytes, Stack size 8 bytes, system_swm1800.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; switchToXTAL &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8 (via Veneer)
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToRC6MHz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToRC48MHz
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToRC12MHz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToRC32KHz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToRC24MHz
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToXTAL
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ3_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ3_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ6_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ6_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ6_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ7_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ7_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ7_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ8_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ8_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ8_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ9_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ9_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ9_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ10_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ10_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ11_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ11_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ12_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ12_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ13_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ13_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ14_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ14_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ15_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ15_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ16_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ16_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ17_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ17_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ18_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ18_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ19_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ19_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ20_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ20_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ21_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ21_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ22_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ22_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ23_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ23_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ24_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ24_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ25_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ25_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ26_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ26_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ27_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ27_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ28_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ28_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ29_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ29_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ30_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ30_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ31_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_swm1800.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ31_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init (via Veneer)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rotate_speed (via Veneer)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetBaudrate (via Veneer)
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltRippleComp (via Veneer)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm (via Veneer)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq (via Veneer)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupControlParameters (via Veneer)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcTimes
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lose_step_detect (via Veneer)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_current_protect (via Veneer)
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcbus_voltage_protect (via Veneer)
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lose_step_detect (via Veneer)
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_current_protect (via Veneer)
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcbus_voltage_protect (via Veneer)
</UL>

<P><STRONG><a name="[c7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[53]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr (via Veneer)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz (via Veneer)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[32]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[c9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>CalcEstI</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, smc.o(i.CalcEstI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcEstI
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMC_Position_Estimation (via Veneer)
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[cb]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[cc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[5d]"></a>SMC_Position_Estimation</STRONG> (Thumb, 480 bytes, Stack size 40 bytes, smc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SMC_Position_Estimation &rArr; atan2CORDIC &rArr; CORDIC_Arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Fun (via Veneer)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcEstI (via Veneer)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBEMF
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2CORDIC
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateParkAngle
</UL>

<P><STRONG><a name="[78]"></a>SMCInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>CalcRefVec</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, calcref.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcRefVec
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>

<P><STRONG><a name="[83]"></a>ClarkePark</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, clrkpark.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ClarkePark
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>

<P><STRONG><a name="[73]"></a>InitMeasCompCurr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, meascurr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm
</UL>

<P><STRONG><a name="[82]"></a>MeasCompCurr</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, meascurr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MeasCompCurr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>

<P><STRONG><a name="[6a]"></a>InitPI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupControlParameters
</UL>

<P><STRONG><a name="[7f]"></a>CalcPI</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, pi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalcPI
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoControl
</UL>

<P><STRONG><a name="[cd]"></a>Cal_PID</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, pi.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>gabs</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_Current_Offset_Advalue_detect
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Phase_current_deviation
</UL>

<P><STRONG><a name="[60]"></a>UartInit</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UartInit &rArr; IRQ_Connect &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Connect
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>_CRC16</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
</UL>

<P><STRONG><a name="[64]"></a>uart_putstring2</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_putstring2
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_IsTXFIFOFull
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
</UL>

<P><STRONG><a name="[67]"></a>Communication</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Communication &rArr; _CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putstring2
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>SetupControlParameters</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetupControlParameters &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitPI
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>CountInputFreq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CountInputFreq &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rotate_speed
</UL>

<P><STRONG><a name="[6c]"></a>calculate_rotate_speed</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = calculate_rotate_speed &rArr; CountInputFreq &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Open
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>SetupParm</STRONG> (Thumb, 774 bytes, Stack size 56 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetupParm &rArr; IRQ_Connect &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Start (via Veneer)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init (via Veneer)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Connect
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMeasCompCurr
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>CountInputFreq_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CountInputFreq_Init &rArr; GPIO_Init &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Init (via Veneer)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Connect
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Open
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>main</STRONG> (Thumb, 392 bytes, Stack size 0 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = main &rArr; SetupParm &rArr; IRQ_Connect &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_fault_init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_fault_detect
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via Veneer)
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit (via Veneer)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rotate_speed
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupControlParameters
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Communication
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FWInit (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupPorts (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMCInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7e]"></a>DoControl</STRONG> (Thumb, 692 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DoControl &rArr; FieldWeakening &rArr; DIV_Fun
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_16 (via Veneer)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcPI
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FieldWeakening (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>

<P><STRONG><a name="[81]"></a>CalculateParkAngle</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CalculateParkAngle &rArr; SMC_Position_Estimation &rArr; atan2CORDIC &rArr; CORDIC_Arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMC_Position_Estimation
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>

<P><STRONG><a name="[e]"></a>IRQ0_Handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = IRQ0_Handler &rArr; CalculateParkAngle &rArr; SMC_Position_Estimation &rArr; atan2CORDIC &rArr; CORDIC_Arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_current_max_check
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateParkAngle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoControl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinCos (via Veneer)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcSVGen (via Veneer)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeasCompCurr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvPark (via Veneer)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClarkePark
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcRefVec
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ4_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ4_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Start (via Veneer)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ1_Handler</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IRQ1_Handler &rArr; SysLed_Twinkle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_Stop (via Veneer)
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMR_INTClr (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLed_Twinkle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_InvBit (via Veneer)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Close
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ2_Handler</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ2_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ5_Handler</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, pmsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IRQ5_Handler &rArr; ADC_IntEOCClr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntEOCClr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_swm1800.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>DebounceDelay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pmsm.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>VoltRippleComp</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, pmsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
</UL>

<P><STRONG><a name="[89]"></a>SysLed_Twinkle</STRONG> (Thumb, 1136 bytes, Stack size 4 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysLed_Twinkle &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler
</UL>

<P><STRONG><a name="[0]"></a>dcbus_voltage_protect</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dcbus_voltage_protect &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>phase_current_max_check</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, faultprotect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ0_Handler
</UL>

<P><STRONG><a name="[1]"></a>phase_current_protect</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = phase_current_protect &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>motor_lose_step_detect</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = motor_lose_step_detect &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via Veneer)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via Veneer)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>Phase_current_deviation</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Phase_current_deviation
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>IPM_FO_detect</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, faultprotect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>Phase_Current_Offset_Advalue_detect</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Phase_Current_Offset_Advalue_detect
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>Over_temperature_detect</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, faultprotect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>motor_fault_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, faultprotect.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>motor_fault_detect</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, faultprotect.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = motor_fault_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>ADC_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[6f]"></a>ADC_Init</STRONG> (Thumb, 324 bytes, Stack size 8 bytes, swm1800_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm
</UL>

<P><STRONG><a name="[70]"></a>ADC_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm
</UL>

<P><STRONG><a name="[72]"></a>ADC_Start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, swm1800_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm
</UL>

<P><STRONG><a name="[cf]"></a>ADC_Stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_adc.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>ADC_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[95]"></a>ADC_IsEOC</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[d0]"></a>ADC_ChnOpen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swm1800_adc.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>ADC_ChnClose</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swm1800_adc.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>ADC_IntEOCEn</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[97]"></a>ADC_IntEOCDis</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[8d]"></a>ADC_IntEOCClr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, swm1800_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_IntEOCClr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ5_Handler
</UL>

<P><STRONG><a name="[98]"></a>ADC_IntEOCStat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[99]"></a>ADC_IntOVFEn</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[9a]"></a>ADC_IntOVFDis</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[9b]"></a>ADC_IntOVFClr</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[9c]"></a>ADC_IntOVFStat</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, swm1800_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chn2idx
</UL>

<P><STRONG><a name="[77]"></a>CORDIC_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, swm1800_cordic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CORDIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>DIV_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, swm1800_div.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>EXTI_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swm1800_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ4_Handler
</UL>

<P><STRONG><a name="[75]"></a>EXTI_Init</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, swm1800_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq_Init
</UL>

<P><STRONG><a name="[6d]"></a>EXTI_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_rotate_speed
</UL>

<P><STRONG><a name="[8b]"></a>EXTI_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ1_Handler
</UL>

<P><STRONG><a name="[d2]"></a>EXTI_State</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_exti.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>EXTI_RawState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_exti.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>IRQ_Connect</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, swm1800_irqmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IRQ_Connect &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountInputFreq_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupParm
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[d4]"></a>IRQ_Which</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, swm1800_irqmux.o(.text), UNUSED)

<P><STRONG><a name="[35]"></a>PORT_Init</STRONG> (Thumb, 678 bytes, Stack size 16 bytes, swm1800_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupPorts (via Veneer)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchToXTAL (via Veneer)
</UL>

<P><STRONG><a name="[9e]"></a>UART_Close</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[61]"></a>UART_Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, swm1800_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[63]"></a>UART_Open</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[65]"></a>UART_WriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, swm1800_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putstring2
</UL>

<P><STRONG><a name="[8c]"></a>UART_ReadByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, swm1800_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ2_Handler
</UL>

<P><STRONG><a name="[d5]"></a>UART_IsDataValid</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>UART_IsTXBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>UART_IsRXFIFOEmpty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>UART_IsTXFIFOFull</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putstring2
</UL>

<P><STRONG><a name="[9f]"></a>UART_SetBaudrate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, swm1800_uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>UART_GetBaudrate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>UART_INTRXThresholdEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>UART_INTRXThresholdDis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>UART_INTRXThresholdStat</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>UART_INTTXThresholdEn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>UART_INTTXThresholdDis</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>UART_INTTXThresholdStat</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>UART_INTTimeoutEn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>UART_INTTimeoutDis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>UART_INTTimeoutStat</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, swm1800_uart.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_lose_step_detect
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phase_current_protect
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcbus_voltage_protect
</UL>

<P><STRONG><a name="[4f]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via Veneer)
</UL>

<P><STRONG><a name="[51]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via Veneer)
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue (via Veneer)
</UL>

<P><STRONG><a name="[e3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>CalcBEMF</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, smc.o(i.CalcBEMF))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CalcBEMF
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMC_Position_Estimation
</UL>

<P><STRONG><a name="[54]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, svgen.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLed_Twinkle
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Svpwm_Cal (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[59]"></a>atan2CORDIC</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, smc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atan2CORDIC &rArr; CORDIC_Arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Arctan
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Div_IsBusy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMC_Position_Estimation
</UL>

<P><STRONG><a name="[5a]"></a>DIV_Div</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, smc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Arctan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2CORDIC
</UL>

<P><STRONG><a name="[5b]"></a>DIV_Div_IsBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, smc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORDIC_Arctan
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2CORDIC
</UL>

<P><STRONG><a name="[5c]"></a>CORDIC_Arctan</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, smc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CORDIC_Arctan
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Div_IsBusy
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIV_Div
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2CORDIC
</UL>

<P><STRONG><a name="[3]"></a>lose_phase_detect</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, faultprotect.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> faultprotect.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>chn2idx</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, swm1800_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntOVFStat
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntOVFClr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntOVFDis
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntOVFEn
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntEOCStat
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntEOCDis
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntEOCEn
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IsEOC
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Read
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IntEOCClr
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, swm1800_irqmux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Connect
</UL>

<P><STRONG><a name="[45]"></a>switchToXTAL</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, system_swm1800.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = switchToXTAL &rArr; PORT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[48]"></a>switchToRC24MHz</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_swm1800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[47]"></a>switchToRC32KHz</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_swm1800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4b]"></a>switchToRC12MHz</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_swm1800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4a]"></a>switchToRC48MHz</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, system_swm1800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[49]"></a>switchToRC6MHz</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, system_swm1800.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
